{"version":3,"sources":["Tablero.js","App.js","serviceWorker.js","index.js"],"names":["Tablero","props","state","tablero","mov_posibles","this","cargar_tablero","console","log","setState","f","c","rango_8","i","push","filas","fila","reverse","id","map","key","click","click_casillero","String","fromCharCode","charCodeAt","Component","FilaTablero","columna","Casillero","color","es_posible","findIndex","e0","e1","className","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4SAEMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,KACTC,aAAc,IAJC,E,gEAQEC,KAAKC,mB,uCAGxBC,QAAQC,IAAI,kBACZH,KAAKI,SAAS,CAACN,QAAS,O,sCAGVO,EAAEC,GAChBJ,QAAQC,IAAI,OAAQE,EAAGC,K,+BAGf,IAAD,OACDT,EAAQG,KAAKH,MAEnB,GAAgB,OADAA,EAAMC,QACA,OAAO,oDAE7B,IADA,IAAMS,EAAU,GACPC,EAAI,EAAGA,EAAI,EAAGA,IAAMD,EAAQE,KAAKD,GAG1C,IADA,IAAME,EAAQ,GACd,MAAgBH,EAAhB,eAAyB,CAAb,KAAP,IAAoB,EACjBI,EAAO,GADU,cAEPJ,GAFO,IAEvB,2BAAyB,SACvBI,EAAKF,KAAK,OAHW,8BAKvBC,EAAMD,KAAKE,GAGb,OADAD,EAAME,UACC,yBAAKC,GAAG,qBACb,wCACA,2BAAOA,GAAG,WACR,+BACGH,EAAMI,KAAI,SAACH,EAAMN,GAAP,OAAa,kBAAC,EAAD,CAAaU,IAAKV,EAAGA,EAAG,EAAEA,EAAGM,KAAMA,EAAMK,MAAO,EAAKC,gBAAiBlB,aAAcF,EAAME,kBAClH,4BACA,6BACCQ,EAAQO,KAAI,SAAAN,GAAC,OAAI,wBAAIO,IAAKP,GAAIU,OAAOC,aAAa,IAAIC,WAAW,GAAKZ,e,GA3C3Da,aAmDhBC,EAAc,SAAC1B,GAAD,OAAW,4BAC7B,4BAAKA,EAAMS,EAAI,GACbT,EAAMe,KAAKG,KAAI,SAACS,EAASjB,GAAV,OACf,kBAAC,EAAD,CAAWS,IAAK,CAACnB,EAAMS,EAAGC,GACfD,EAAGT,EAAMS,EACTC,EAAGA,EACHP,aAAcH,EAAMG,aACpBiB,MAAOpB,EAAMoB,aAItBQ,E,uKAEF,IAAM5B,EAAQI,KAAKJ,MACbS,EAAIT,EAAMS,EACVC,EAAIV,EAAMU,EACVmB,GAASpB,EAAIC,GAAK,IAAM,EAAI,QAAU,SACtCoB,EAAa9B,EAAMG,aAAa4B,WAAU,mCAAEC,EAAF,KAAKC,EAAL,YAAaD,IAAOvB,GAAKwB,IAAOvB,MAAM,EACtF,OAAO,wBAAIwB,UAAS,UAAKL,EAAL,YAAcC,GAAc,WAAaK,QAAS,kBAAInC,EAAMoB,MAAMX,EAAGC,U,GAPrEe,aAWT1B,ICjEAqC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.326cecda.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Tablero extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tablero: null,\n      mov_posibles: [],\n    }\n  }\n\n  componentDidMount() {this.cargar_tablero();}\n\n  cargar_tablero() {\n    console.log('cargar tablero');\n    this.setState({tablero: {} }); // TODO: llamar API de carli\n  }\n\n  click_casillero(f,c) {\n    console.log('hola', f, c);\n  }\n\n  render() {\n    const state = this.state;\n    const tablero = state.tablero;\n    if (tablero === null) return <p>Tablero no cargado...</p>;\n    const rango_8 = [];\n    for (let i = 0; i < 8; i++) {rango_8.push(i);}\n\n    const filas = []\n    for (const f of rango_8) {\n      const fila = [];\n      for (const c of rango_8) {\n        fila.push(null);\n      }\n      filas.push(fila);\n    }\n    filas.reverse();\n    return <div id=\"container_tablero\">\n      <h3>Tablero:</h3>\n      <table id=\"tablero\">\n        <tbody>\n          {filas.map((fila, f) => <FilaTablero key={f} f={7-f} fila={fila} click={this.click_casillero} mov_posibles={state.mov_posibles}/>)}\n          <tr>\n          <td></td>\n          {rango_8.map(i => <td key={i}>{String.fromCharCode('a'.charCodeAt(0) + i)}</td>)}\n          </tr>\n        </tbody>\n      </table>\n    </div>;\n  }\n}\n\nconst FilaTablero = (props) => <tr>\n  <td>{props.f + 1}</td>\n  { props.fila.map((columna, c) =>\n    <Casillero key={[props.f, c]}\n               f={props.f}\n               c={c}\n               mov_posibles={props.mov_posibles}\n               click={props.click}/>\n   )}\n</tr>;\n\nclass Casillero extends Component {\n  render() {\n    const props = this.props;\n    const f = props.f;\n    const c = props.c;\n    const color = (f + c) % 2 === 0 ? 'claro' : 'oscuro';\n    const es_posible = props.mov_posibles.findIndex(([e0,e1]) => e0 === f && e1 === c) >= 0;\n    return <td className={`${color} ${es_posible && 'posible'}`} onClick={()=>props.click(f, c)}></td>;\n  }\n}\n\nexport default Tablero;\n","import './App.css';\nimport React from 'react';\nimport Tablero from './Tablero';\n\nfunction App() {\n  return (\n    <Tablero/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}